// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	dto "github.com/petara94/go-auth/internal/transport/http/api/dto"
	mock "github.com/stretchr/testify/mock"
)

// SessionRepository is an autogenerated mock type for the SessionRepository type
type SessionRepository struct {
	mock.Mock
}

type SessionRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *SessionRepository) EXPECT() *SessionRepository_Expecter {
	return &SessionRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: session
func (_m *SessionRepository) Create(session dto.Session) (*dto.Session, error) {
	ret := _m.Called(session)

	var r0 *dto.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.Session) (*dto.Session, error)); ok {
		return rf(session)
	}
	if rf, ok := ret.Get(0).(func(dto.Session) *dto.Session); ok {
		r0 = rf(session)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(dto.Session) error); ok {
		r1 = rf(session)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessionRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type SessionRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - session dto.Session
func (_e *SessionRepository_Expecter) Create(session interface{}) *SessionRepository_Create_Call {
	return &SessionRepository_Create_Call{Call: _e.mock.On("Create", session)}
}

func (_c *SessionRepository_Create_Call) Run(run func(session dto.Session)) *SessionRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dto.Session))
	})
	return _c
}

func (_c *SessionRepository_Create_Call) Return(_a0 *dto.Session, _a1 error) *SessionRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SessionRepository_Create_Call) RunAndReturn(run func(dto.Session) (*dto.Session, error)) *SessionRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByToken provides a mock function with given fields: token
func (_m *SessionRepository) DeleteByToken(token string) error {
	ret := _m.Called(token)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessionRepository_DeleteByToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByToken'
type SessionRepository_DeleteByToken_Call struct {
	*mock.Call
}

// DeleteByToken is a helper method to define mock.On call
//   - token string
func (_e *SessionRepository_Expecter) DeleteByToken(token interface{}) *SessionRepository_DeleteByToken_Call {
	return &SessionRepository_DeleteByToken_Call{Call: _e.mock.On("DeleteByToken", token)}
}

func (_c *SessionRepository_DeleteByToken_Call) Run(run func(token string)) *SessionRepository_DeleteByToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *SessionRepository_DeleteByToken_Call) Return(_a0 error) *SessionRepository_DeleteByToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SessionRepository_DeleteByToken_Call) RunAndReturn(run func(string) error) *SessionRepository_DeleteByToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetByToken provides a mock function with given fields: token
func (_m *SessionRepository) GetByToken(token string) (*dto.Session, error) {
	ret := _m.Called(token)

	var r0 *dto.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*dto.Session, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) *dto.Session); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessionRepository_GetByToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByToken'
type SessionRepository_GetByToken_Call struct {
	*mock.Call
}

// GetByToken is a helper method to define mock.On call
//   - token string
func (_e *SessionRepository_Expecter) GetByToken(token interface{}) *SessionRepository_GetByToken_Call {
	return &SessionRepository_GetByToken_Call{Call: _e.mock.On("GetByToken", token)}
}

func (_c *SessionRepository_GetByToken_Call) Run(run func(token string)) *SessionRepository_GetByToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *SessionRepository_GetByToken_Call) Return(_a0 *dto.Session, _a1 error) *SessionRepository_GetByToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SessionRepository_GetByToken_Call) RunAndReturn(run func(string) (*dto.Session, error)) *SessionRepository_GetByToken_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewSessionRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewSessionRepository creates a new instance of SessionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSessionRepository(t mockConstructorTestingTNewSessionRepository) *SessionRepository {
	mock := &SessionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
