// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	dto "github.com/petara94/go-auth/internal/transport/http/api/dto"
	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

type UserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRepository) EXPECT() *UserRepository_Expecter {
	return &UserRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: user
func (_m *UserRepository) Create(user dto.User) (uint64, error) {
	ret := _m.Called(user)

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.User) (uint64, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(dto.User) uint64); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(dto.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type UserRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - user dto.User
func (_e *UserRepository_Expecter) Create(user interface{}) *UserRepository_Create_Call {
	return &UserRepository_Create_Call{Call: _e.mock.On("Create", user)}
}

func (_c *UserRepository_Create_Call) Run(run func(user dto.User)) *UserRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dto.User))
	})
	return _c
}

func (_c *UserRepository_Create_Call) Return(_a0 uint64, _a1 error) *UserRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepository_Create_Call) RunAndReturn(run func(dto.User) (uint64, error)) *UserRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByID provides a mock function with given fields: id
func (_m *UserRepository) DeleteByID(id uint64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepository_DeleteByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByID'
type UserRepository_DeleteByID_Call struct {
	*mock.Call
}

// DeleteByID is a helper method to define mock.On call
//   - id uint64
func (_e *UserRepository_Expecter) DeleteByID(id interface{}) *UserRepository_DeleteByID_Call {
	return &UserRepository_DeleteByID_Call{Call: _e.mock.On("DeleteByID", id)}
}

func (_c *UserRepository_DeleteByID_Call) Run(run func(id uint64)) *UserRepository_DeleteByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *UserRepository_DeleteByID_Call) Return(_a0 error) *UserRepository_DeleteByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepository_DeleteByID_Call) RunAndReturn(run func(uint64) error) *UserRepository_DeleteByID_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: perPage, page
func (_m *UserRepository) Get(perPage int, page int) ([]*dto.User, error) {
	ret := _m.Called(perPage, page)

	var r0 []*dto.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]*dto.User, error)); ok {
		return rf(perPage, page)
	}
	if rf, ok := ret.Get(0).(func(int, int) []*dto.User); ok {
		r0 = rf(perPage, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(perPage, page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type UserRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - perPage int
//   - page int
func (_e *UserRepository_Expecter) Get(perPage interface{}, page interface{}) *UserRepository_Get_Call {
	return &UserRepository_Get_Call{Call: _e.mock.On("Get", perPage, page)}
}

func (_c *UserRepository_Get_Call) Run(run func(perPage int, page int)) *UserRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *UserRepository_Get_Call) Return(_a0 []*dto.User, _a1 error) *UserRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepository_Get_Call) RunAndReturn(run func(int, int) ([]*dto.User, error)) *UserRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: id
func (_m *UserRepository) GetByID(id uint64) (*dto.User, error) {
	ret := _m.Called(id)

	var r0 *dto.User
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (*dto.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint64) *dto.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.User)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type UserRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - id uint64
func (_e *UserRepository_Expecter) GetByID(id interface{}) *UserRepository_GetByID_Call {
	return &UserRepository_GetByID_Call{Call: _e.mock.On("GetByID", id)}
}

func (_c *UserRepository_GetByID_Call) Run(run func(id uint64)) *UserRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *UserRepository_GetByID_Call) Return(_a0 *dto.User, _a1 error) *UserRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepository_GetByID_Call) RunAndReturn(run func(uint64) (*dto.User, error)) *UserRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByLogin provides a mock function with given fields: login
func (_m *UserRepository) GetByLogin(login string) (*dto.User, error) {
	ret := _m.Called(login)

	var r0 *dto.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*dto.User, error)); ok {
		return rf(login)
	}
	if rf, ok := ret.Get(0).(func(string) *dto.User); ok {
		r0 = rf(login)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_GetByLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByLogin'
type UserRepository_GetByLogin_Call struct {
	*mock.Call
}

// GetByLogin is a helper method to define mock.On call
//   - login string
func (_e *UserRepository_Expecter) GetByLogin(login interface{}) *UserRepository_GetByLogin_Call {
	return &UserRepository_GetByLogin_Call{Call: _e.mock.On("GetByLogin", login)}
}

func (_c *UserRepository_GetByLogin_Call) Run(run func(login string)) *UserRepository_GetByLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UserRepository_GetByLogin_Call) Return(_a0 *dto.User, _a1 error) *UserRepository_GetByLogin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepository_GetByLogin_Call) RunAndReturn(run func(string) (*dto.User, error)) *UserRepository_GetByLogin_Call {
	_c.Call.Return(run)
	return _c
}

// LinkToGroup provides a mock function with given fields: id, groupId
func (_m *UserRepository) LinkToGroup(id uint64, groupId uint64) error {
	ret := _m.Called(id, groupId)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, uint64) error); ok {
		r0 = rf(id, groupId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepository_LinkToGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LinkToGroup'
type UserRepository_LinkToGroup_Call struct {
	*mock.Call
}

// LinkToGroup is a helper method to define mock.On call
//   - id uint64
//   - groupId uint64
func (_e *UserRepository_Expecter) LinkToGroup(id interface{}, groupId interface{}) *UserRepository_LinkToGroup_Call {
	return &UserRepository_LinkToGroup_Call{Call: _e.mock.On("LinkToGroup", id, groupId)}
}

func (_c *UserRepository_LinkToGroup_Call) Run(run func(id uint64, groupId uint64)) *UserRepository_LinkToGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(uint64))
	})
	return _c
}

func (_c *UserRepository_LinkToGroup_Call) Return(_a0 error) *UserRepository_LinkToGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepository_LinkToGroup_Call) RunAndReturn(run func(uint64, uint64) error) *UserRepository_LinkToGroup_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: user
func (_m *UserRepository) Update(user dto.User) (*dto.User, error) {
	ret := _m.Called(user)

	var r0 *dto.User
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.User) (*dto.User, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(dto.User) *dto.User); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.User)
		}
	}

	if rf, ok := ret.Get(1).(func(dto.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type UserRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - user dto.User
func (_e *UserRepository_Expecter) Update(user interface{}) *UserRepository_Update_Call {
	return &UserRepository_Update_Call{Call: _e.mock.On("Update", user)}
}

func (_c *UserRepository_Update_Call) Run(run func(user dto.User)) *UserRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dto.User))
	})
	return _c
}

func (_c *UserRepository_Update_Call) Return(_a0 *dto.User, _a1 error) *UserRepository_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepository_Update_Call) RunAndReturn(run func(dto.User) (*dto.User, error)) *UserRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewUserRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepository(t mockConstructorTestingTNewUserRepository) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
