// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	dto "github.com/petara94/go-auth/internal/transport/http/api/dto"
	mock "github.com/stretchr/testify/mock"
)

// AuthService is an autogenerated mock type for the AuthService type
type AuthService struct {
	mock.Mock
}

type AuthService_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthService) EXPECT() *AuthService_Expecter {
	return &AuthService_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: token
func (_m *AuthService) Get(token string) (*dto.Session, error) {
	ret := _m.Called(token)

	var r0 *dto.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*dto.Session, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) *dto.Session); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type AuthService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - token string
func (_e *AuthService_Expecter) Get(token interface{}) *AuthService_Get_Call {
	return &AuthService_Get_Call{Call: _e.mock.On("Get", token)}
}

func (_c *AuthService_Get_Call) Run(run func(token string)) *AuthService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *AuthService_Get_Call) Return(_a0 *dto.Session, _a1 error) *AuthService_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthService_Get_Call) RunAndReturn(run func(string) (*dto.Session, error)) *AuthService_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: auth
func (_m *AuthService) Login(auth dto.Auth) (*dto.Session, error) {
	ret := _m.Called(auth)

	var r0 *dto.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.Auth) (*dto.Session, error)); ok {
		return rf(auth)
	}
	if rf, ok := ret.Get(0).(func(dto.Auth) *dto.Session); ok {
		r0 = rf(auth)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(dto.Auth) error); ok {
		r1 = rf(auth)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthService_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type AuthService_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - auth dto.Auth
func (_e *AuthService_Expecter) Login(auth interface{}) *AuthService_Login_Call {
	return &AuthService_Login_Call{Call: _e.mock.On("Login", auth)}
}

func (_c *AuthService_Login_Call) Run(run func(auth dto.Auth)) *AuthService_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dto.Auth))
	})
	return _c
}

func (_c *AuthService_Login_Call) Return(_a0 *dto.Session, _a1 error) *AuthService_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthService_Login_Call) RunAndReturn(run func(dto.Auth) (*dto.Session, error)) *AuthService_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Logout provides a mock function with given fields: session
func (_m *AuthService) Logout(session dto.Session) error {
	ret := _m.Called(session)

	var r0 error
	if rf, ok := ret.Get(0).(func(dto.Session) error); ok {
		r0 = rf(session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthService_Logout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logout'
type AuthService_Logout_Call struct {
	*mock.Call
}

// Logout is a helper method to define mock.On call
//   - session dto.Session
func (_e *AuthService_Expecter) Logout(session interface{}) *AuthService_Logout_Call {
	return &AuthService_Logout_Call{Call: _e.mock.On("Logout", session)}
}

func (_c *AuthService_Logout_Call) Run(run func(session dto.Session)) *AuthService_Logout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dto.Session))
	})
	return _c
}

func (_c *AuthService_Logout_Call) Return(_a0 error) *AuthService_Logout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthService_Logout_Call) RunAndReturn(run func(dto.Session) error) *AuthService_Logout_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewAuthService interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuthService creates a new instance of AuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthService(t mockConstructorTestingTNewAuthService) *AuthService {
	mock := &AuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
