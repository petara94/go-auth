// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	dto "github.com/petara94/go-auth/internal/transport/http/api/dto"
	mock "github.com/stretchr/testify/mock"
)

// UserGroupService is an autogenerated mock type for the UserGroupService type
type UserGroupService struct {
	mock.Mock
}

type UserGroupService_Expecter struct {
	mock *mock.Mock
}

func (_m *UserGroupService) EXPECT() *UserGroupService_Expecter {
	return &UserGroupService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: u
func (_m *UserGroupService) Create(u dto.UserGroup) (*dto.UserGroup, error) {
	ret := _m.Called(u)

	var r0 *dto.UserGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.UserGroup) (*dto.UserGroup, error)); ok {
		return rf(u)
	}
	if rf, ok := ret.Get(0).(func(dto.UserGroup) *dto.UserGroup); ok {
		r0 = rf(u)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.UserGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(dto.UserGroup) error); ok {
		r1 = rf(u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserGroupService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type UserGroupService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - u dto.UserGroup
func (_e *UserGroupService_Expecter) Create(u interface{}) *UserGroupService_Create_Call {
	return &UserGroupService_Create_Call{Call: _e.mock.On("Create", u)}
}

func (_c *UserGroupService_Create_Call) Run(run func(u dto.UserGroup)) *UserGroupService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dto.UserGroup))
	})
	return _c
}

func (_c *UserGroupService_Create_Call) Return(_a0 *dto.UserGroup, _a1 error) *UserGroupService_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserGroupService_Create_Call) RunAndReturn(run func(dto.UserGroup) (*dto.UserGroup, error)) *UserGroupService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: id
func (_m *UserGroupService) Delete(id uint64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserGroupService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type UserGroupService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id uint64
func (_e *UserGroupService_Expecter) Delete(id interface{}) *UserGroupService_Delete_Call {
	return &UserGroupService_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *UserGroupService_Delete_Call) Run(run func(id uint64)) *UserGroupService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *UserGroupService_Delete_Call) Return(_a0 error) *UserGroupService_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserGroupService_Delete_Call) RunAndReturn(run func(uint64) error) *UserGroupService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: id
func (_m *UserGroupService) Get(id uint64) (*dto.UserGroup, error) {
	ret := _m.Called(id)

	var r0 *dto.UserGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (*dto.UserGroup, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint64) *dto.UserGroup); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.UserGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserGroupService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type UserGroupService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - id uint64
func (_e *UserGroupService_Expecter) Get(id interface{}) *UserGroupService_Get_Call {
	return &UserGroupService_Get_Call{Call: _e.mock.On("Get", id)}
}

func (_c *UserGroupService_Get_Call) Run(run func(id uint64)) *UserGroupService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *UserGroupService_Get_Call) Return(_a0 *dto.UserGroup, _a1 error) *UserGroupService_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserGroupService_Get_Call) RunAndReturn(run func(uint64) (*dto.UserGroup, error)) *UserGroupService_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: u
func (_m *UserGroupService) Update(u dto.UserGroup) (*dto.UserGroup, error) {
	ret := _m.Called(u)

	var r0 *dto.UserGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.UserGroup) (*dto.UserGroup, error)); ok {
		return rf(u)
	}
	if rf, ok := ret.Get(0).(func(dto.UserGroup) *dto.UserGroup); ok {
		r0 = rf(u)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.UserGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(dto.UserGroup) error); ok {
		r1 = rf(u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserGroupService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type UserGroupService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - u dto.UserGroup
func (_e *UserGroupService_Expecter) Update(u interface{}) *UserGroupService_Update_Call {
	return &UserGroupService_Update_Call{Call: _e.mock.On("Update", u)}
}

func (_c *UserGroupService_Update_Call) Run(run func(u dto.UserGroup)) *UserGroupService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dto.UserGroup))
	})
	return _c
}

func (_c *UserGroupService_Update_Call) Return(_a0 *dto.UserGroup, _a1 error) *UserGroupService_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserGroupService_Update_Call) RunAndReturn(run func(dto.UserGroup) (*dto.UserGroup, error)) *UserGroupService_Update_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewUserGroupService interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserGroupService creates a new instance of UserGroupService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserGroupService(t mockConstructorTestingTNewUserGroupService) *UserGroupService {
	mock := &UserGroupService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
