// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	dto "github.com/petara94/go-auth/internal/transport/http/api/dto"
	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

type UserService_Expecter struct {
	mock *mock.Mock
}

func (_m *UserService) EXPECT() *UserService_Expecter {
	return &UserService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: u
func (_m *UserService) Create(u dto.User) (*dto.User, error) {
	ret := _m.Called(u)

	var r0 *dto.User
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.User) (*dto.User, error)); ok {
		return rf(u)
	}
	if rf, ok := ret.Get(0).(func(dto.User) *dto.User); ok {
		r0 = rf(u)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.User)
		}
	}

	if rf, ok := ret.Get(1).(func(dto.User) error); ok {
		r1 = rf(u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type UserService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - u dto.User
func (_e *UserService_Expecter) Create(u interface{}) *UserService_Create_Call {
	return &UserService_Create_Call{Call: _e.mock.On("Create", u)}
}

func (_c *UserService_Create_Call) Run(run func(u dto.User)) *UserService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dto.User))
	})
	return _c
}

func (_c *UserService_Create_Call) Return(_a0 *dto.User, _a1 error) *UserService_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_Create_Call) RunAndReturn(run func(dto.User) (*dto.User, error)) *UserService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: id
func (_m *UserService) Delete(id uint64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type UserService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id uint64
func (_e *UserService_Expecter) Delete(id interface{}) *UserService_Delete_Call {
	return &UserService_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *UserService_Delete_Call) Run(run func(id uint64)) *UserService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *UserService_Delete_Call) Return(_a0 error) *UserService_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserService_Delete_Call) RunAndReturn(run func(uint64) error) *UserService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: perPage, page
func (_m *UserService) Get(perPage int, page int) ([]*dto.User, error) {
	ret := _m.Called(perPage, page)

	var r0 []*dto.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]*dto.User, error)); ok {
		return rf(perPage, page)
	}
	if rf, ok := ret.Get(0).(func(int, int) []*dto.User); ok {
		r0 = rf(perPage, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(perPage, page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type UserService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - perPage int
//   - page int
func (_e *UserService_Expecter) Get(perPage interface{}, page interface{}) *UserService_Get_Call {
	return &UserService_Get_Call{Call: _e.mock.On("Get", perPage, page)}
}

func (_c *UserService_Get_Call) Run(run func(perPage int, page int)) *UserService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *UserService_Get_Call) Return(_a0 []*dto.User, _a1 error) *UserService_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_Get_Call) RunAndReturn(run func(int, int) ([]*dto.User, error)) *UserService_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: id
func (_m *UserService) GetByID(id uint64) (*dto.User, error) {
	ret := _m.Called(id)

	var r0 *dto.User
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (*dto.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint64) *dto.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.User)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type UserService_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - id uint64
func (_e *UserService_Expecter) GetByID(id interface{}) *UserService_GetByID_Call {
	return &UserService_GetByID_Call{Call: _e.mock.On("GetByID", id)}
}

func (_c *UserService_GetByID_Call) Run(run func(id uint64)) *UserService_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *UserService_GetByID_Call) Return(_a0 *dto.User, _a1 error) *UserService_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_GetByID_Call) RunAndReturn(run func(uint64) (*dto.User, error)) *UserService_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: u
func (_m *UserService) Update(u dto.User) (*dto.User, error) {
	ret := _m.Called(u)

	var r0 *dto.User
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.User) (*dto.User, error)); ok {
		return rf(u)
	}
	if rf, ok := ret.Get(0).(func(dto.User) *dto.User); ok {
		r0 = rf(u)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.User)
		}
	}

	if rf, ok := ret.Get(1).(func(dto.User) error); ok {
		r1 = rf(u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type UserService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - u dto.User
func (_e *UserService_Expecter) Update(u interface{}) *UserService_Update_Call {
	return &UserService_Update_Call{Call: _e.mock.On("Update", u)}
}

func (_c *UserService_Update_Call) Run(run func(u dto.User)) *UserService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dto.User))
	})
	return _c
}

func (_c *UserService_Update_Call) Return(_a0 *dto.User, _a1 error) *UserService_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_Update_Call) RunAndReturn(run func(dto.User) (*dto.User, error)) *UserService_Update_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewUserService interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserService(t mockConstructorTestingTNewUserService) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
